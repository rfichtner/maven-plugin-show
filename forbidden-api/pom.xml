<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.xdevsoftware</groupId>
	<artifactId>pizza-backend</artifactId>
	<version>0.0.1-SNAPSHOT</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven.compiler.release>11</maven.compiler.release>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.1.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<build>
		<plugins>
			<plugin>
				<groupId>de.thetaphi</groupId>
				<artifactId>forbiddenapis</artifactId>
				<version>3.7</version>
				<configuration>
					<!--
					if the used Java version is too new,
					don't fail, just do nothing:
					-->
					<failOnUnsupportedJava>true</failOnUnsupportedJava>
					<!--
					If a class is missing while parsing signatures files, all methods
					and fields from this class are silently ignored. This is useful
					in multi-module Maven projects where only some modules have the
					dependency to which the signature file(s) apply.
					
					This settings prints no warning at all, so verify the signatures
					at least once with full dependencies.
					-->
					<ignoreSignaturesOfMissingClasses>true</ignoreSignaturesOfMissingClasses>
					<bundledSignatures>
						<!--
						This will automatically choose the right
						signatures based on 'maven.compiler.target':
					-->
						<bundledSignature>jdk-unsafe</bundledSignature>
						<bundledSignature>jdk-deprecated</bundledSignature>
						<!-- disallow undocumented classes like sun.misc.Unsafe: -->
						<bundledSignature>jdk-non-portable</bundledSignature>
						<!-- don't allow unsafe reflective access: -->
						<bundledSignature>jdk-reflection</bundledSignature>

					</bundledSignatures>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>